import argparse
import socket
import requests

'''
config.yaml

singleuser:
  lifecycleHooks:
    postStart:
      exec:
        command:
          - sh
          - "-c"
          - >
            cd /home/jovyan
            # consider extending the pythonpath in the python magic code, that would be clean.
            # todo, use fileset  in the makefile to inject the magic code into ~/.ipython/startup/...

            wget https://some.real.url/submitter.py
            SUBMIT_SERVER_USERID="staff" 
            SUBMIT_SERVER_PASSWD="@staff needs add passwd here."
            python3 submitter.py --submit-passwd $SUBMIT_SERVER_PASSWD
'''

def parse_args():
    parser = argparse.ArgumentParser(description=(
        'program that submits answers to the submission server.'
        'there are two modes of operation. '
        'PodStarting, and SubmitAnswer'
    ))

    anon_id_help_msg = (
        "This should be the anonymous id generated by edx for each student. "
        "or something close to it, there may need to be some munging to get it right"
    )
    
    parser.add_argument('--edx-anon-id', dest='edx_anon_id', type=str,
                        help='edx anonymous id')
    parser.add_argument('--submit-passwd', dest='submit_passwd', type=str,
                        help="staff-only, password for submission server")
    
    args = parser.parse_args()
    return args

def check_pod_starting_mode(args):
    '''check to make sure all the flags necessary for pod starting mode are used.'''
    if not args.edx_anon_id: 
        raise Exception("In pod starting mode, the program must be run with: --edx-anon-id=[todo figure out example here]")
     
    if not args.submit_passwd: 
        raise Exception("In pod starting mode, the program must be run with: --submit-passwd=[an actual password]")
    
    return True

class Mode:
    def get_edx_anon_id(self):
        '''jupyter hub assigns the hostname to the edx_anon_id passed in by
        the lti_launcher. TODO this might need to be cleaned up to
        make remoxblock happy
        '''
        return socket.gethostname()
    
class SubmissionMode(Mode):
    def __init__(self, answers_json):
        self.send_request(answers_json)

    def send_request(self, answers_json):        
        '''Sends a request to the submission server that this pod, with this
        ip address and this edx-anon-id is submitting answers,
        trusting that the submission server is going to be checking
        that the ip in this request is equal to what was logged
        earlier on the submission server.
        '''
        sess = requests.Session()
        req = requests.Request(
            url="http://submitter:3000/submit_answer", # there must be a k8s service called submitter.
            method="POST",
            data={
                "mode": "submission",
                "edx_anon_id": self.get_edx_anon_id(),
                "answers_json": answers_json,
            },            
            auth=("student", "student")
        )
        rsp = sess.send(req.prepare())

class _PodStartingMode(Mode):
    ''' please do not import this class '''
    
    def __init__(self):
        print("pod starting mode")
        self.cmdline_args = parse_args()
        self.send_request()
        
    def send_request(self):        
        '''Sends a request to the submission server, that this pod, with this
        ip address and this edx-anon-id is starting.

        '''
        sess = requests.Session()
        req = requests.Request(
            url="http://submitter:3000/pod_starting", # ensure a k8s service called submitter exists.
            method="POST",
            data={
                "edx_anon_id": self.get_edx_anon_id(),                
            },
            auth=("staff", self.cmdline_args.submit_passwd)
        )
        rsp = sess.send(req.prepare())
        print(self.get_edx_anon_id())
        print(self.cmdline_args.submit_passwd)
        print(rsp.text)
        print(rsp.text)
        
if __name__ == "__main__":
    # in PodStartingMode.
    # TODO ensure the submitter service is running!
    _PodStartingMode()
